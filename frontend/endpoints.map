POST 
	login					# attempt a login. takes email and sha256 hashed passw as data. returns 200 Okay for correct login, and 400 if not, etc. 
									secondary return: userid + auto-generated key. used for authing the connection // timeout of ~5min for demo 
									after timeout return 401 to EVERYTHING. 
								expects the following in json:
									[{"email": "name@somewhere"}, {"pw_hash": "<>"}] 
								responds with ~:
									{"userid": 0, "auth_key": "9Znn8S5p0oZ^fk^^H6Td", "expires_in": 300}
	data					# post a new ticket to db. takes a list of title and description + state as well as a key. 
								in json:
									[{"title": "some stuff"}, {"description": "long string"}, {"key": "<>"}] 
	newuser					# adds a ticket to the db to create a new user. takes email + pw_hash as minimum - optionally a commonName 
								as json:
									[{"email": "name@somewhere"}, {"pw_hash": "<>"}, {"commonName": "something something"}] 

GET 
	data					# returns json of tickets. takes key hash as input data for verification 
								input json: 
									[{"key": "<>"}] 


RETURN CODES 
	Success 
		200:    Query successful 
		201:	Creation of ticket was succesful 
		202:	Query accepted [No sql injection detected/] 
	
	Failure 
		400:	Request is incomplete/incorrect 
		401:	Unauthorized request or expired login key 
		403:	Forbidden = SQL Injection stopped. 
		404:    Requested resource not found 
		405:	Method not allowed for request type 
		411:	Content length missing 
		418:	Wrong endpoint for request 
		500:	Server requested is down 
		507:	New key cannot be created (Login metric) 
